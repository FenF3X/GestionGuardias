1749338485
8a0c4faa9771445189035ca844487507-phpdoc%3A2c7787ccd6c72a653c398afe15bbb5ec-d200c61758a63b3cf282138f368e723b
s:57392:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:9:"index.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"d200c61758a63b3cf282138f368e723b";s:39:" phpDocumentor\Reflection\Php\File path";s:26:"REST/rest_server/index.php";s:41:" phpDocumentor\Reflection\Php\File source";s:39801:"
<?php
/**
 * =========================
 *  index.php (REST Server)
 * =========================
 * 
 * servidor REST.
 * Interpreta las peticiones HTTP entrantes,
 * determina el método (GET, POST, PUT, DELETE, etc.),
 * y segun la accion maneja de forma diferente la peticion
 * 
 * @package    GestionGuardias
 * @author     Adrian Pascual Marschal
 * @license    MIT
 * @includes   config.php  Archivo con la función de conexión a la BD.
 */

include("config.php"); 
session_start();        

// Obtener el método de la petición (GET, POST, PUT, DELETE...)
$metodo = $_SERVER['REQUEST_METHOD'];

// Obtener el recurso solicitado (ruta completa)
$recurso = filter_input(INPUT_SERVER, 'REQUEST_URI', FILTER_SANITIZE_URL);

    // =====================================
    // PETICIONES **GET**
    // =====================================
if ($metodo === 'GET') {
    // =====================================
    // Verificación del parámetro obligatorio
    // =====================================    
    
    $document = $_GET['document'] ?? null;
    if (!$document) {
        echo json_encode(["error" => "documento requerido"]);
        exit;
    }
    // ==========================================
    //  acción diferenciada de la misma petición
    // ==========================================
    $accion = $_GET['accion'] ?? null;
    /**
     * Acción: consultaSesiones
     * 
     * @description Devuelve todas las sesiones horarias posibles para cualquier grupo.
     * 
     * @return JSON  Array de sesiones con su orden y rango horario.
     */
    if($accion === "consultaSesiones"){
        $sql = "SELECT DISTINCT sessio_orde, 
            CONCAT('Sesion ', sessio_orde, ': ', hora_desde, ' - ', hora_fins) AS horario_completo 
            FROM sessions_horari 
            ORDER BY sessio_orde ASC";

        $result = conexion_bd(SERVIDOR,USER,PASSWD,BASE_DATOS,$sql);

        if (is_array($result)) {
            if (!empty($result)) {
                echo json_encode($result);
            } else{
                echo json_encode(["error" => "Sesiones vacias"]);
            }
        } 
        else{
                echo json_encode(["error" => "Error en la consulta"]);
        }
    }
    /**
     * Acción: verHorario
     * 
     * @description Devuelve el horario del docente para un día concreto.
     * 
     * @param string document  DNI del docente
     * @param string dia       Día de la semana (L, M, X, J, V)
     * @return JSON            Lista de sesiones del día
     */
    elseif ($accion === "verHorario") {
        if (isset($_GET['dia'])) {
            $dia = $_GET['dia'];
            
            $sql = "SELECT 
                hg.dia_setmana,
                hg.hora_desde,
                hg.hora_fins,
                c.nom_cas AS asignatura,
                hg.grup AS grupo,
                hg.aula AS aula,
                hg.sessio_orde AS sesion
                FROM horari_grup hg
                LEFT JOIN continguts c ON c.codi = hg.contingut
                WHERE hg.docent = '$document'
                AND hg.dia_setmana = '$dia'
                ORDER BY FIELD(hg.dia_setmana, 'L', 'M', 'X', 'J', 'V'), hg.hora_desde
            ";

            $resultado_horario = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);

            if (is_array($resultado_horario)) {
                echo json_encode($resultado_horario);
            } else {
                echo json_encode(["error" => "No se encontraron datos de horario"]);
            }
        } else {
            echo json_encode(["error" => "Día no proporcionado"]);
        }
    } 
    /**
     * Acción: verGuardias
     * 
     * @description Devuelve las ausencias (guardias) registradas en la fecha actual.
     * 
     * @param string document  DNI del docente
     * @return JSON            Lista de ausencias del día actual
     */
    elseif ($accion === "verGuardias") {
        $fecha = date('Y-m-d');  

        $sql = "SELECT 
            sesion, aula, grupo, asignatura, 
            document,nombreProfe,cubierto 
            FROM ausencias WHERE fecha = '$fecha'
        ";
        $respuesta = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
        if (is_array($respuesta)) {
            echo json_encode($respuesta);  
        } else {
            echo json_encode(["error" => "No se encontraron guardias para hoy"]);
        }
    }
    /**
     * Acción: verGuardiasPorFecha
     * 
     * @description Devuelve las ausencias (guardias) registradas en la fecha seleccionada.
     * 
     * @param string document  DNI del docente
     * @param string fecha     Fecha seleccionada en formato Y-m-d
     * @return JSON            Lista de ausencias de ese día
     */  
    elseif ($accion === "verGuardiasPorFecha") {
        $fecha = $_GET['fecha'] ?? null;
        if (!$fecha) {
            echo json_encode(["error" => "Fecha no proporcionada"]);
            exit;
        }

        $sql = "SELECT 
            sesion, aula, grupo, 
            asignatura, document,
            nombreProfe,fecha 
            FROM ausencias WHERE fecha = '$fecha'
        ";
        $respuesta = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);

        if (is_array($respuesta)) {
            echo json_encode($respuesta);  
        } else {
            echo json_encode(["error" => "No se encontraron guardias para " . $fecha]);
        }
    }
    /**
     * Acción: generarInforme
     * 
     * @description Genera un informe filtrado de guardias registradas.
     * 
     * @param string tipo      Tipo de filtro (dia, semana, mes, trimestre, docent, curs)
     * @param mixed  fecha     Fecha concreta, semana (YYYY-MM-DD), mes (YYYY-MM), etc.
     * @return JSON            Datos del informe según el tipo solicitado
     */
    elseif ($accion === "generarInforme") {
        $tipo = $_GET['tipo'] ?? [];

        switch ($tipo) {
            case 'dia':
                $fecha = $_GET['fecha'];

                $sql = "SELECT fecha,nombreProfe,nombreProfeReempl,
                    aula, grupo, asignatura, sesion_orden,dia_semana, 
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias 
                    FROM  registro_guardias WHERE  fecha = '$fecha'; 
                ";
            break;
            case 'semana':  
                $diaSemana = $_GET['semana'];
                $inicioSemana = date('Y-m-d', strtotime('monday this week', strtotime($diaSemana)));
                $finSemana = date('Y-m-d', strtotime('sunday this week', strtotime($diaSemana)));

                $sql = "SELECT fecha,nombreProfe,nombreProfeReempl, 
                    aula, grupo, asignatura, sesion_orden,dia_semana, 
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias
                    FROM registro_guardias 
                    WHERE fecha BETWEEN '$inicioSemana' AND '$finSemana'
                ";
            break;
            case 'mes':
                $mes = $_GET['mes'];
                $sql = "SELECT fecha,nombreProfe,nombreProfeReempl, 
                    aula, grupo, asignatura, sesion_orden,dia_semana, 
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias
                    FROM registro_guardias 
                    WHERE DATE_FORMAT(fecha, '%Y-%m') = '$mes'
                ";
            break;
            case 'plazo':
                $inicio = $_GET['plazoInicio'];
                $fin = $_GET['plazoFin'];

                $sql = "SELECT fecha,nombreProfe, nombreProfeReempl,
                aula, grupo, asignatura, sesion_orden,dia_semana,
                CONCAT(hora_inicio, '--', hora_fin),total_guardias 
                FROM registro_guardias
                WHERE fecha BETWEEN '$inicio' AND '$fin'
            ";
            break;
            case 'trimestre':
                $trimestre = $_GET['trimestre'] ?? '';

                if ($trimestre == 1) {
                    $inicio = "2024-09-09";
                    $fin = "2024-12-22";
                } elseif ($trimestre == 2) {
                    $inicio = "2025-01-08";
                    $fin = "2025-04-14";
                } else {
                    $inicio = "2025-04-29";
                    $fin = "2025-06-21";
                }

                $sql = "SELECT fecha,nombreProfe, nombreProfeReempl,
                    aula, grupo, asignatura, sesion_orden,dia_semana,
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias 
                    FROM registro_guardias
                    WHERE fecha BETWEEN '$inicio' AND '$fin'
                ";
            break;
            case 'docent':
                $docente = $_GET['docente'] ?? '';

                $sql = "SELECT fecha,nombreProfe,nombreProfeReempl,
                    aula, grupo, asignatura, sesion_orden,dia_semana,
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias
                    FROM registro_guardias 
                    WHERE docente_guardia = '$docente'
                ";
            break;
            case 'curso':
                $ano = $_GET['ano'] ?? '';
                $inicio = $ano."-09-01";
                $fin = ($ano + 1) ."-07-1";
                $sql = "SELECT fecha,nombreProfe,nombreProfeReempl,
                    aula, grupo, asignatura, sesion_orden,dia_semana, 
                    CONCAT(hora_inicio, '--', hora_fin),total_guardias
                    FROM registro_guardias 
                    WHERE fecha BETWEEN '$inicio' AND '$fin'
                ";
                error_log($sql);
            break;
            default:
                error_log("tipo no valido");
            break;
        }
        $result = conexion_bd(SERVIDOR,USER,PASSWD,BASE_DATOS,$sql);
        if (is_array($result)) {
            echo json_encode($result);
        }else{
            error_log("error en la consulta");
        }
    }
}
    // =====================================
    // PETICIONES **POST**
    // =====================================
elseif ($metodo === 'POST') {
    $data = json_decode(file_get_contents("php://input"), true);
    $accion = $data['accion'] ?? ($_POST['accion'] ?? null);

    /**
    * Acción: InicioSesion
    * 
    * @description Verifica las credenciales del usuario (documento + contraseña).
    * Si son válidas, devuelve nombre, documento y rol. Registra el acceso.
    * 
    * @param string document  DNI del usuario
    * @param string password  Fecha de nacimiento o contraseña codificada
    * @return JSON            { loggeado: bool, nombre: string, document: string, rol: string }
    */
    if ($accion === "InicioSesion") {
        $document = $_POST['document'] ?? null;         
        $password = $_POST['password'] ?? null;          

        if ($document && $password) {             
            $sql = "SELECT * FROM usuarios WHERE document = '$document'";             
            $resultado = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);              

            if (is_array($resultado)) {                 
                $sqlNom = "SELECT 
                    CONCAT(nom,' ',cognom1,' ',cognom2) 
                    FROM docent WHERE document = '$document'
                ";                 
                $resultadoNom = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlNom);                  

                if (is_array($resultadoNom)) {                     
                    $nombre_profesor = $resultadoNom[0][0];                  
                } else {                     
                    $nombre_profesor = "Desconocido";                 
                }                  

                if (password_verify($password, $resultado[0][2])) {                     
                    $fechaHora = date('d-m-Y H:i:s');                     
                    $linea = "$fechaHora | Éxito | DNI: $document 
                    | Profesor: $nombre_profesor | Log In(Entrada)\n";

                    $archivo = fopen("registroAccesos.txt", "a");                     
                    if ($archivo) {                         
                        fwrite($archivo, $linea);                         
                        fclose($archivo);                     
                    } else {                         
                        error_log("Error al abrir el archivo");                     
                    }                     
                    echo json_encode(["loggeado" => true, 
                                        "nombre" => $nombre_profesor, 
                                        "document" => $resultado[0][1], 
                                        "rol" => $resultado[0][3]
                                    ]);                 
                } 
                else {                     
                    $fechaHora = date('d-m-Y H:i:s');                     
                    $linea = "$fechaHora | Fallo | DNI: $document |
                    Profesor: $nombre_profesor | Log In(Entrada)\n";                     
                    
                    $archivo = fopen("registroAccesos.txt", "a");                     
                    if ($archivo) {                         
                        fwrite($archivo, $linea);                         
                        fclose($archivo);                     
                    } else {                         
                        error_log("Error al abrir el archivo");                     
                    }                     
                    echo json_encode(["loggeado" => false, 
                                        "error" => "Contraseña errónea"
                                    ]);                 
                }              
            } else {                 
                echo json_encode(["loggeado" => false, "error" => "Usuario inexistente"]);             
            }          
        } else {             
            echo json_encode(["loggeado" => false, "error" => "Faltan datos del usuario"]);         
        }
    }
    /**
    * Acción: ficharEntrada / ficharSalida
    * 
    * @description Registra la entrada o salida del docente en el sistema.
    * 
    * @param string document       DNI del docente
    * @param string hora_entrada   Hora de entrada (solo para entrada)
    * @param string hora_salida    Hora de salida (solo para salida)
    * @return JSON                 { exito: string } o { error: string }
    */
    elseif ($accion === "ficharEntrada" || $accion === "ficharSalida") {

        $document = $_POST['document'] ?? null;         
        $fecha = date('Y-m-d');  
        $hora_entrada = $_POST['hora_entrada'] ?? null;
        $hora_salida = $_POST['hora_salida'] ?? null;

        if ($document) {
            if ($accion === "ficharEntrada") {
                // Comprobar si ya fichó la entrada hoy
                $sqlCheckEntrada = "SELECT * FROM registro_jornada 
                    WHERE document = '$document' 
                    AND fecha = '$fecha' 
                    AND hora_entrada IS NOT NULL
                ";
                $resultadoEntrada = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlCheckEntrada);

                if (is_array($resultadoEntrada) && count($resultadoEntrada) > 0) {
                    // Si ya existe un registro de entrada
                    echo json_encode(["error" => "Ya has fichado entrada hoy"]);
                } else {
                    // Fichaje de entrada
                    if ($hora_entrada) {

                        $sqlNombre = "SELECT CONCAT(nom, ' ', cognom1, ' ', cognom2) 
                            AS nombre FROM docent 
                            WHERE document = '$document'
                        ";

                        $resultadoNombre = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlNombre);
                        $nombre = is_array($resultadoNombre) ? $resultadoNombre[0][0] : 'Desconocido';

                        $sql = "INSERT INTO registro_jornada 
                            (document, fecha, hora_entrada, hora_salida, nombre) 
                            VALUES 
                            ('$document', '$fecha', '$hora_entrada', NULL, '$nombre')
                        ";
                        $resultFicharEnt = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);

                        if ($resultFicharEnt > 0) {
                            echo json_encode(["exito" => "Entrada registrada correctamente"]);
                        } else {
                            echo json_encode(["error" => "Error al registrar la entrada"]);
                        }
                    } else {
                        echo json_encode(["error" => "Falta la hora de entrada"]);
                    }
                }
            } elseif ($accion === "ficharSalida") {
                // Comprobar si existe un registro de entrada para poder registrar la salida
                $sqlCheckSalida = "SELECT * FROM registro_jornada 
                    WHERE document = '$document'
                    AND fecha = '$fecha' 
                    AND hora_entrada IS NOT NULL 
                    AND hora_salida IS NULL
                ";
                $resultadoSalida = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlCheckSalida);

                if (is_array($resultadoSalida) && count($resultadoSalida) > 0) {
                    // Si existe un registro de entrada, actualizamos con la salida
                    if ($hora_salida) {
                        $sqlUpdateSalida = "UPDATE registro_jornada 
                            SET hora_salida = '$hora_salida' 
                            WHERE document = '$document' 
                            AND fecha = '$fecha' 
                            AND hora_salida IS NULL
                        ";
                        $resultFicharSal = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlUpdateSalida);

                        if ($resultFicharSal > 0) {
                            echo json_encode(["exito" => "Salida registrada correctamente"]);
                        } else {
                            echo json_encode(["error" => "Error al registrar la salida"]);
                        }
                    } else {
                        echo json_encode(["error" => "Falta la hora de salida"]);
                    }
                } else {
                    echo json_encode(["error" => "No se ha fichado entrada hoy o ya se registró la salida"]);
                }
            } else {
                echo json_encode(["error" => "Acción no válida"]);
            }
        } else {
            echo json_encode(["error" => "Faltan datos del usuario"]);
        }
    }
    /**
    * Acción: consultaProfes
    * 
    * @description Devuelve la lista de todos los profesores registrados.
    * 
    * @return JSON  Lista de profesores con su documento y nombre completo.
    */
    elseif ($accion === "consultaProfes") {

        $sql = "SELECT document, 
        CONCAT(nom, ' ', cognom1, ' ', cognom2) 
        AS nombre_completo FROM docent";

        $resultado = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if (is_array($resultado)) {
            echo json_encode($resultado);  
        } else {
            echo json_encode(["error" => "No se encontraron docentes"]);  
        }
    }
    /**
    * Acción: verSesiones
    * 
    * @description Devuelve el horario del docente para un día concreto.
    * 
    * @param string document  DNI del profesor
    * @param string dia       Día de la semana en formato corto (L, M, X, etc.)
    * @return JSON            Lista de sesiones del día
    */

    elseif ($accion === "verSesiones") {
        $document = $_POST['document'];
        $dia = $_POST['dia'];

        $sql = "SELECT 
            hg.dia_setmana,
            hg.hora_desde,
            hg.hora_fins,
            c.nom_cas AS asignatura,
            hg.grup AS grupo,
            hg.aula AS aula,
            hg.sessio_orde AS sesion
        FROM horari_grup hg
        LEFT JOIN continguts c ON c.codi = hg.contingut
        WHERE hg.docent = '$document'
        AND hg.dia_setmana = '$dia'
        ORDER BY FIELD(hg.dia_setmana, 'L', 'M', 'X', 'J', 'V'), hg.hora_desde";

        $resultado_horario = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);

        if (is_array($resultado_horario)) {
            echo json_encode($resultado_horario);
        } else {
            echo json_encode(["error" => "No se encontraron datos de horario"]);
        }
    }
    /**
    * Acción: registrarAusencia
    * 
    * @description Registra una ausencia parcial o completa del docente con sus sesiones afectadas.
    * 
    * @param string fecha               Fecha de la ausencia
    * @param string document            DNI del profesor
    * @param bool   justificada         Si está justificada
    * @param bool   jornada_completa    Si es jornada completa
    * @param array  sesiones            Lista de sesiones codificadas en JSON
    * @return JSON                      { exito: string } o { error: string }
    */
    elseif ($accion === "registrarAusencia") {
    
        $data = json_decode(file_get_contents("php://input"), true);
    
        $fecha = $data['fecha'] ?? null;
        $document = $data['document'] ?? null;
        $justificada = $data['justificada'] ?? null;
        $jornada_completa = $data['jornada_completa'] ?? null;
        $sesionesSeleccionadas = $data['sesiones'] ?? [];
    
        $resultadoIn = true;
    
        $sqlNombre = "SELECT CONCAT(nom, ' ', cognom1, ' ', cognom2) 
            AS nombreProfe 
            FROM docent 
            WHERE document = '$document'
        ";
        $resultadoNombre = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlNombre);
        $nombreProfe = is_array($resultadoNombre) ? $resultadoNombre[0][0] : 'Desconocido';
    
        if (!empty($sesionesSeleccionadas)) {
            foreach ($sesionesSeleccionadas as $sesionJson) {
                $sesion = json_decode($sesionJson, true);
    
                if (!is_array($sesion) || count($sesion) < 7) {
                    $resultadoIn = false;
                    break;
                }
    
                $dia = $sesion[0];
                $hora_inicio = $sesion[1];
                $hora_fin = $sesion[2];
                $asignatura = $sesion[3];
                $grupo = $sesion[4];
                $aula = $sesion[5];
                $sesion_orden = $sesion[6];
    
                $sql = "INSERT INTO ausencias (
                    hora_inicio, hora_fin, dia, aula, grupo, asignatura, sesion,
                    document, nombreProfe, justificada, jornada_completa, fecha
                    ) VALUES (
                    '$hora_inicio', '$hora_fin', '$dia', '$aula', 
                    '$grupo', '$asignatura', '$sesion_orden',
                    '$document', '$nombreProfe', '$justificada', 
                    '$jornada_completa', '$fecha'
                    )
                ";
    
                $resultadoConsulta = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
                if ($resultadoConsulta === false) {
                    $resultadoIn = false;
                    error_log("Error al ejecutar la consulta SQL: " . $sql);
                    break;
                }
            }
    
            if ($resultadoIn) {
                
                echo json_encode(["exito" => "Entrada registrada correctamente"]);
            } else {
                error_log("Error en la inserción");
                echo json_encode(["error" => "Error al registrar la entrada"]);
            }
        } else {
            error_log("No se enviaron sesiones.");
            echo json_encode(["error" => "No se seleccionaron sesiones"]);
        }
    }
    /**
    * Acción: asignarGuardia
    * 
    * @description Marca una guardia como cubierta por un docente. Dispara un trigger en BD.
    * 
    * @param string sesion             Número de sesión
    * @param string documentAus        Profesor que falta
    * @param string document           Profesor que cubre
    * @param int    cubierto           Valor 1 para marcar como cubierta
    * @return JSON                     { exito: string } o { error: string }
    */
    elseif ($accion === "asignarGuardia") {
        $fecha = date('Y-m-d');
    
        $datos = json_decode(file_get_contents("php://input"), true);

        if (!is_array($datos)) {
            echo json_encode(["error" => "Datos no válidos"]);
            exit;
        }
    
        // Parámetros 
        $sesionAus       = $datos["sesion"];
        $documentAus     = $datos["documentAus"];
        $documentCubierto= $datos["document"];
        $cubiertoAus     = $datos["cubierto"];

        $sql = "
            UPDATE ausencias
            SET 
            cubierto = '$cubiertoAus',
            document_cubierto = '$documentCubierto',
            NombreRemp = (
                    SELECT CONCAT(nom, ' ', cognom1, ' ', cognom2)
                    FROM docent
                    WHERE document = '$documentCubierto'
                )
            WHERE sesion   = '$sesionAus'
            AND document = '$documentAus';
        ";

        $resultadoAsignar = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if ($resultado === false) {
            echo json_encode(["error" => "Error al marcar la guardia como cubierta"]);
            exit;
        }
        echo json_encode(["exito" => "Guardia asignada correctamente"]);
        exit;
    }
    /**
    * Acción: historialGuardias
    * 
    * @description Devuelve las guardias realizadas por un docente, con filtros opcionales.
    * 
    * @param string document   DNI del docente
    * @param string fecha      (Opcional) Fecha a filtrar
    * @param int    hora       (Opcional) Sesión a filtrar
    * @return JSON             Lista de registros de guardias
    */
    elseif ($accion === "historialGuardias") {

        $document = $_POST['document'];
        $fecha = isset($_POST["fecha"]) ? date("Y-m-d", strtotime($_POST["fecha"])) : null;
        $sesion = isset($_POST["hora"]) ? (int)trim($_POST["hora"]) : null;
    
        if ($fecha && $sesion) {
            $sql = "SELECT * FROM registro_guardias 
                WHERE docente_guardia = '$document' 
                AND fecha = '$fecha' 
                AND sesion_orden = $sesion
            ";
        } elseif ($fecha) {
            $sql = "SELECT * FROM registro_guardias 
                WHERE docente_guardia = '$document' 
                AND fecha = '$fecha'
            ";
        } elseif ($sesion) {
            $sql = "SELECT * FROM registro_guardias 
                WHERE docente_guardia = '$document' 
                AND sesion_orden = $sesion
            ";
        } else {
            $sql = "SELECT * FROM registro_guardias 
                WHERE docente_guardia = '$document'
            ";
        }

        $historialGuard = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if (is_array($historialGuard)) {
            echo json_encode($historialGuard);
        } else {
            echo json_encode(["error" => "No se encontraron registros de guardias"]);
        }
    }
    /**
    * Acción: consultarAsistencia
    * 
    * @description Devuelve las asistencias de un docente con filtro por día o mes.
    * 
    * @param string document   DNI del docente (opcional)
    * @param string fecha      Fecha concreta (opcional)
    * @param string mes        Mes en formato YYYY-MM (opcional)
    * @return JSON             Lista de asistencias
    */
    elseif ($accion === 'consultarAsistencia') {
        $documento = $_POST['document'] ?? null;
        $fecha = $_POST['fecha'] ?? null;
        $mes = $_POST['mes'] ?? null;
    
        $condiciones = [];
        
        if ($documento) {
            $condiciones[] = "document = '$documento'";
        }
    
        if ($fecha) {
            $fechaFormateada = date("Y-m-d", strtotime($fecha));
            $condiciones[] = "fecha = '$fechaFormateada'";
        }
    
        if ($mes) {
            $anioMes = explode('-', $mes);
            $anio = $anioMes[0];
            $mesNum = $anioMes[1];
            $condiciones[] = "YEAR(fecha) = '$anio' AND MONTH(fecha) = '$mesNum'";
        }
    
        $where = count($condiciones) > 0 ? 'WHERE ' . implode(' AND ', $condiciones) : '';
    
        $sql = "SELECT nombre, fecha, hora_entrada, hora_salida 
            FROM registro_jornada 
            $where ORDER BY fecha, hora_entrada
        ";
        
        $resultado = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if (is_array($resultado)) {
            echo json_encode($resultado);
        } else {
            echo json_encode(["error" => "No se encontraron registros"]);
        }
    }
    /**
    * Acción: consultaProfesEscritos
    * 
    * @description Devuelve la lista de profesores con los que se ha intercambiado mensajes.
    * Solo devuelve un mensaje por profesor, el más reciente.
    * 
    * @param string documento  DNI del usuario logueado
    * @return JSON             Lista de conversaciones con último mensaje
    */
    elseif ($accion === "consultaProfesEscritos") {
        $doc = $_POST['documento'];
        $sql = "SELECT DISTINCT *
            FROM (
                SELECT DISTINCT
                docent_receptor AS interlocutor_id,
                nombreReceptor   AS interlocutor_nombre,
                mensaje,
                fecha,
                hora
                FROM mensajes
                WHERE docent_emisor  = '$doc'
                AND docent_receptor <> '$doc'
                UNION ALL
                SELECT DISTINCT
                docent_emisor   AS interlocutor_id,
                nombreEmisor    AS interlocutor_nombre,
                mensaje,
                fecha,
                hora
                FROM mensajes
                WHERE docent_receptor = '$doc'
                AND docent_emisor   <> '$doc'
            ) AS todos_los_mensajes
            ORDER BY fecha DESC, hora DESC;
        ";
        $resultado = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
        if (is_array($resultado)) {
            $unicos = [];

            foreach ($resultado as $mensaje) {
                $dni = $mensaje[0]; 

                if (!isset($unicos[$dni])) {
                $unicos[$dni] = $mensaje;
                }
            }

            $resultadoFiltrado = array_values($unicos);
            echo json_encode($resultadoFiltrado);  

        } else {
            echo json_encode(["error" => "No se encontraron docentes"]);  
        }
    }
    /**
    * Acción: consultaProfesMensaje
    * 
    * @description Devuelve todos los profesores disponibles para enviar mensajes.
    * 
    * @return JSON  Lista de profesores con su DNI y nombre completo
    */
    elseif ($accion === "consultaProfesMensaje") {

        $sql = "SELECT document, 
            CONCAT(nom, ' ', cognom1, ' ', cognom2) 
            AS nombre_completo FROM docent
        ";
        $resultado = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if (is_array($resultado)) {
            echo json_encode($resultado);  
        } else {
            echo json_encode(["error" => "No se encontraron docentes"]);  
        }
    }
    /**
    * Acción: consultaMensajes
    * 
    * @description Devuelve todos los mensajes entre dos docentes, y marca como leídos los recibidos.
    * 
    * @param string emisor     DNI del emisor
    * @param string receptor   DNI del receptor
    * @return JSON             Lista de mensajes
    */
    elseif ($accion === "consultaMensajes") {
        $docent_emisor   = $_POST['emisor'];
        $docent_receptor = $_POST['receptor'];
    
        $sql = "SELECT docent_emisor, mensaje, fecha, hora, leido
            FROM mensajes
            WHERE (
                docent_emisor = '$docent_emisor' 
                AND docent_receptor = '$docent_receptor'
            )
            OR (
                docent_emisor = '$docent_receptor' 
                AND docent_receptor = '$docent_emisor'
            )
            ORDER BY fecha
        ";

        $resultMensajes = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
    
        if (is_array($resultMensajes) && !empty($resultMensajes)) {

            foreach ($resultMensajes as $mensaje) {

                if (!($mensaje[4])) {
                    $sqlUpd = " UPDATE mensajes
                        SET leido = NOW()
                        WHERE docent_emisor   = '$docent_receptor'
                        AND docent_receptor = '$docent_emisor'
                        AND leido IS NULL 
                    ";
                conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sqlUpd);
                }
            }
        }
        $sql = "SELECT docent_emisor, mensaje, fecha, hora, leido
            FROM mensajes
            WHERE (
                docent_emisor = '$docent_emisor' 
                AND docent_receptor = '$docent_receptor'
            )
            OR (
                docent_emisor = '$docent_receptor' 
                AND docent_receptor = '$docent_emisor'
            )
            ORDER BY fecha
        ";
        if (is_array($resultMensajes) && !empty($resultMensajes)) {
            $resultMensajes = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
            echo json_encode($resultMensajes);
        }
        else {
            echo json_encode("No tienes mensajes en este chat");
        }
    }
    /**
    * Acción: enviaMensaje
    * 
    * @description Inserta un nuevo mensaje en la base de datos entre dos docentes.
    * 
    * @param string emisor           DNI del emisor
    * @param string nombreEmisor     Nombre del emisor
    * @param string receptor         DNI del receptor
    * @param string nombreReceptor   Nombre del receptor
    * @param string mensaje          Texto del mensaje
    * @return JSON                   { success: true } o { error: string }
    */
    elseif ($accion == "enviaMensaje") {
        $docent_emisor   = $_POST['emisor'];
        $nombreEmisor = $_POST['nombreEmisor'];
        $docent_receptor = $_POST['receptor'];
        $nombreReceptor = $_POST['nombreReceptor'];
        $mensaje         = $_POST['mensaje'];
        $fecha           = date('Y-m-d');
        $hora            = date('H:i:s');  
    
        $sql = "INSERT INTO mensajes
            (docent_emisor, nombreEmisor, docent_receptor,
            nombreReceptor, mensaje, fecha, hora)
            VALUES(
                '$docent_emisor', '$nombreEmisor', '$docent_receptor',
                '$nombreReceptor', '" . addslashes($mensaje) . "', '$fecha', '$hora'
            )
        ";

        $mensajeEscrito = conexion_bd(SERVIDOR, USER, PASSWD, BASE_DATOS, $sql);
        if ($mensajeEscrito) {
            echo json_encode(['success' => true]);
        } else {
            echo json_encode([
                'success' => false,
                'error'   => 'No se pudo enviar el mensaje'
            ]);
        }
        exit;
    }
} 
    // =====================================
    // PETICIONES **PUT**
    // =====================================
elseif ($metodo === 'PUT') {

    $raw = file_get_contents('php://input');

    $datos = json_decode($raw, true);
    if (!is_array($datos)) {
        parse_str($raw, $datos);
    }
    /**
    * Acción: EditarMensaje 
    * 
    * @description Permite editar un mensaje ya enviado. Se localiza por emisor, fecha, hora y contenido original.
    * 
    * @param string docentEmisor     DNI del emisor del mensaje
    * @param string fecha            Fecha del mensaje (formato Y-m-d)
    * @param string hora             Hora exacta del mensaje (formato H:i:s)
    * @param string mOriginal        Texto original del mensaje
    * @param string mEditado         Texto editado que se quiere guardar
    * 
    * @return JSON                   { exito: true } si se actualizó correctamente, false si no
    */
    if ($datos["accion"] == "EditarMensaje") {
        error_log("entro en editar");
        $docentEmisor       = $datos['docentEmisor']  ?? null;
        $fecha           = $datos['fecha']         ?? null;
        $hora            = $datos['hora']          ?? null;
        $mensajeOriginal = $datos['mOriginal']     ?? null;
        $mensajeEditado  = $datos['mEditado']      ?? null;

        $sql = "UPDATE mensajes 
            SET mensaje = '$mensajeEditado' 
            WHERE docent_emisor = '$docentEmisor' 
            AND fecha = '$fecha' 
            AND hora ='$hora' 
            AND mensaje = '$mensajeOriginal'
        ";

        $result = conexion_bd(SERVIDOR, USER,PASSWD,BASE_DATOS,$sql);

        if ($result) {
            echo json_encode(["exito" => true]);
        } else{
            echo json_encode(["exito" => false]);
        }
    }
} 
    // =====================================
    // PETICIONES **DELETE**
    // =====================================
elseif ($metodo === 'DELETE') {         
    $raw = file_get_contents('php://input');

    $datos = json_decode($raw, true);
    if (!is_array($datos)) {
        parse_str($raw, $datos);
    }
    /**
    * Acción: BorrarMensaje
    * 
    * @description Elimina uno o varios mensajes enviados. Cada mensaje se identifica por fecha, hora y contenido exacto.
    * 
    * @param array mensajes[]        Lista de mensajes a borrar (con fecha, hora y mensajeOriginal)
    * 
    * @example JSON esperado:
    * {
    *   "accion": "BorrarMensaje",
    *   "mensajes": [
    *     { "fecha": "2025-05-08", "hora": "09:30:00", "mensajeOriginal": "Hola" },
    *     { "fecha": "2025-05-08", "hora": "09:31:00", "mensajeOriginal": "¿Estás ahí?" }
    *   ]
    * }
    * 
    * @return JSON                   { exito: true } si se borraron, false si falló
    */
    if ($datos["accion"] == "BorrarMensaje") {
        $wheres = [];

        foreach ($datos["mensajes"] as $m) {
            $fecha   = $m['fecha'];
            $hora    = $m['hora'];
            $texto   = $m['mensajeOriginal'];
            $wheres[] = "(`fecha` = '$fecha' AND `hora` = '$hora' AND `mensaje` = '$texto')";
        }
        
        $sql = "DELETE FROM `mensajes`
            WHERE " . implode(' OR ', $wheres);
        $result = conexion_bd(SERVIDOR,USER,PASSWD,BASE_DATOS,$sql);

        if ($result) {
            echo json_encode(["exito" => true]);
        } else{
            echo json_encode(["exito" => false]);
        }
    }
} 
else {         
    echo json_encode(["error" => "Opción incorrecta!!!!"]); 
}
";s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:76:"=========================
 index.php (REST Server)
=========================";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:165:"servidor REST.
Interpreta las peticiones HTTP entrantes,
determina el método (GET, POST, PUT, DELETE, etc.),
y segun la accion maneja de forma diferente la peticion";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:4:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:15:"GestionGuardias";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:14:" * description";N;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:23:"Adrian Pascual Marschal";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:0:"";}i:2;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"license";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:3:"MIT";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:3;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:8:"includes";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:57:"config.php  Archivo con la función de conexión a la BD.";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";